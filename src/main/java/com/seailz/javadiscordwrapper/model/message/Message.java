package com.seailz.javadiscordwrapper.model.message;

import com.seailz.javadiscordwrapper.model.*;
import com.seailz.javadiscordwrapper.model.embed.Embed;
import com.seailz.javadiscordwrapper.model.emoji.Reaction;
import com.seailz.javadiscordwrapper.model.interation.MessageInteraction;
import com.seailz.javadiscordwrapper.model.message.activity.MessageActivity;

public record Message(
        // The snowflake ID of the message
        String id,
        // The snowflake ID of the channel the message was sent in
        String channelId,
        // The user who sent the message
        User author,
        // The contents of the message
        String content,
        // The timestamp the message was sent at
        String timestamp,
        // The timestamp the message was last edited at (or null if never)
        String editedTimestamp,
        // Whether this was a TTS message
        boolean tts,
        // Whether this message mentions everyone
        boolean mentionEveryone,
        // Users mentioned in the message
        User[] mentions,
        // Roles mentioned in this message
        Role[] mentionRoles,
        // Channels mentioned in this message
        ChannelMention[] mentionChannels,
        // Any attached files
        Attachment[] attachments,
        // Any embedded content
        Embed[] embeds,
        // Reactions to the message
        Reaction[] reactions,
        // Used for validating a message was sent
        String nonce,
        // Whether this message is pinned
        boolean pinned,
        // If this message is generated by a webhook, this is the webhook's ID
        String webhookId,
        // Type of message
        MessageType type,
        // Sent with Rich Presence-related chat embeds
        MessageActivity activity,
        // if the message is an interaction or application-owned webhook, then this is the application object
        Application application,
        // if the message is an interaction or application-owned webhook, then this is the application id
        String applicationId,
        // data showing the source of a crosspost, channel follow add, pin, or reply message
        MessageReference messageReference,
        // the flags applied to the message
        MessageFlag[] flags,
        // the message associated with the message_reference
        Message referencedMessage,
        // sent if the message is a response to an Interaction
        MessageInteraction interaction,
) {
}
